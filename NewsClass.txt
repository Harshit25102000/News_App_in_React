import React, { Component } from 'react'
import NewsItem from './NewsItem'
import Spinner from './Spinner'
import PropTypes from 'prop-types'
import InfiniteScroll from "react-infinite-scroll-component";


export class News extends Component {
    static defaultProps = {
        country:"In",
        pageSize:12,
        category:"general"

    }

    static propTypes = {
        country:PropTypes.string,
        pageSize:PropTypes.number,
        category:PropTypes.string,
    }

    constructor(props){
        super(props);
        this.state={
            articles:[],
            loading:true,
            page:1,
            totalResults:0,
        }
        document.title=`${this.props.category}-Khabar Wala`;
    }

    async updateNews(){ //componendidmount runs after rendering and async means it will run when done 
        this.props.setProgress(0);
        let url=`https://newsapi.org/v2/top-headlines?country=${this.props.country}&category=${this.props.category}&apiKey=722f2cba0ed54ad89607e026db3c3532&page=${this.state.page}&pageSize=${this.props.pageSize}`;
        this.props.setProgress(30);
        this.setState({loading: true});
        let data =await fetch(url);
        let parsedData = await data.json();
        this.props.setProgress(60);
        
        this.setState({articles:parsedData.articles,loading:false,totalResults:parsedData.totalResults})
        this.props.setProgress(100);
    }

    async componentDidMount(){
        this.updateNews();
    }

     handleNextClick=async()=>{
        if (this.state.page+1>Math.ceil(this.state.totalResults/this.props.pageSize)){
            document.getElementById('next').disabled=true;
        }
        else{
        let url=`https://newsapi.org/v2/top-headlines?country=${this.props.country}&category=${this.props.category}&apiKey=722f2cba0ed54ad89607e026db3c3532&page=${this.state.page+1}&pageSize=${this.props.pageSize}`;
        this.setState({loading: true});
        let data =await fetch(url);
        let parsedData = await data.json();
        
       
        this.setState({
            articles:parsedData.articles,
            page:this.state.page+1,
            loading:false
        })
    }
    }

    handlePreviousClick=async()=>{
        let url=`https://newsapi.org/v2/top-headlines?country=${this.props.country}&category=${this.props.category}&apiKey=722f2cba0ed54ad89607e026db3c3532&page=${this.state.page-1}&pageSize=${this.props.pageSize}`;
        this.setState({loading: true});
        let data =await fetch(url);
        let parsedData = await data.json();
        
       
        this.setState({
            articles:parsedData.articles,
            page:this.state.page-1,
            loading:false,
        })

    }

    fetchMoreData = async() => {
        
        let url=`https://newsapi.org/v2/top-headlines?country=${this.props.country}&category=${this.props.category}&apiKey=722f2cba0ed54ad89607e026db3c3532&page=${this.state.page+1}&pageSize=${this.props.pageSize}`;
        
        let data =await fetch(url);
        let parsedData = await data.json();
        
        
        this.setState({articles:this.state.articles.concat(parsedData.articles),loading:false,totalResults:parsedData.totalResults})

    };

  render() {
    return (
      <div className="container my-3">
        <h1 className="text-center">Top Headlines of {this.props.category=="general"?"":this.props.category} in India</h1>
        <div className="text-center">
            
        {this.state.loading && <Spinner/>} {/*if loading is true then spinner */}
        </div>
        <InfiniteScroll
          dataLength={this.state.articles.length}
          next={this.fetchMoreData}
          hasMore={this.state.articles.length !== this.totalResults}
          loader={<Spinner/>}
        >
       <div className="container">
        <div className="row">
    
        {this.state.articles.map((element)=>{
            return <div className="col-md-4" key={element.url}>
            <NewsItem key={element.url} title={element.title?element.title.slice(0,45):"Title Not Available"} description={element.description?element.description.slice(0,88):"Description Not Available"} imageUrl={element.urlToImage} newsUrl={element.url}
            author={element.author?element.author:"Unknown"} date={element.publishedAt}/>
            </div>
        })}
            

           
        </div>
        </div>
        </InfiniteScroll>
        {/*
        <div className="container d-flex justify-content-between">
        <button disabled={this.state.page<=1} type="button" className="btn btn-dark" onClick={this.handlePreviousClick}> &larr; Previous</button>
        <button type="button" className="btn btn-dark" id="next"onClick={this.handleNextClick}>Next &rarr;</button>
        </div>
    */}
       
      </div>
    )
  }
}

export default News
